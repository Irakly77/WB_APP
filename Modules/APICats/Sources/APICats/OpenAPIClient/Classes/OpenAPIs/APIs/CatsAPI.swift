//
// CatsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class CatsAPI {

    /**
     * enum for parameter type
     */
    public enum ModelType_catGet: String, CaseIterable {
        case square = "square"
        case medium = "medium"
        case small = "small"
        case xsmall = "xsmall"
    }

    /**
     * enum for parameter filter
     */
    public enum Filter_catGet: String, CaseIterable {
        case mono = "mono"
        case negate = "negate"
        case custom = "custom"
    }

    /**
     * enum for parameter fit
     */
    public enum Fit_catGet: String, CaseIterable {
        case cover = "cover"
        case contain = "contain"
        case fill = "fill"
        case inside = "inside"
        case outside = "outside"
    }

    /**
     * enum for parameter position
     */
    public enum Position_catGet: String, CaseIterable {
        case top = "top"
        case rightTop = "right top"
        case _right = "right"
        case rightBottom = "right bottom"
        case bottom = "bottom"
        case leftBottom = "left bottom"
        case _left = "left"
        case leftTop = "left top"
        case center = "center"
    }

    /**

     - parameter id: (path)  
     - parameter type: (query)  (optional)
     - parameter filter: (query)  (optional)
     - parameter fit: (query)  (optional)
     - parameter position: (query)  (optional, default to .center)
     - parameter width: (query)  (optional)
     - parameter height: (query)  (optional)
     - parameter blur: (query)  (optional)
     - parameter r: (query) Red (optional)
     - parameter g: (query) Green (optional)
     - parameter b: (query) Blue (optional)
     - parameter brightness: (query) Brightness multiplier (optional)
     - parameter saturation: (query) Saturation multiplier (optional)
     - parameter hue: (query) Hue rotation in degrees (optional)
     - parameter lightness: (query) Lightness addend (optional)
     - parameter html: (query)  (optional)
     - parameter json: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func catGet(id: String, type: ModelType_catGet? = nil, filter: Filter_catGet? = nil, fit: Fit_catGet? = nil, position: Position_catGet? = nil, width: Int? = nil, height: Int? = nil, blur: Int? = nil, r: Int? = nil, g: Int? = nil, b: Int? = nil, brightness: Float? = nil, saturation: Float? = nil, hue: Int? = nil, lightness: Int? = nil, html: Bool? = nil, json: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) -> RequestTask {
        return catGetWithRequestBuilder(id: id, type: type, filter: filter, fit: fit, position: position, width: width, height: height, blur: blur, r: r, g: g, b: b, brightness: brightness, saturation: saturation, hue: hue, lightness: lightness, html: html, json: json).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /cat/{id}
     - Get cat by id
     - parameter id: (path)  
     - parameter type: (query)  (optional)
     - parameter filter: (query)  (optional)
     - parameter fit: (query)  (optional)
     - parameter position: (query)  (optional, default to .center)
     - parameter width: (query)  (optional)
     - parameter height: (query)  (optional)
     - parameter blur: (query)  (optional)
     - parameter r: (query) Red (optional)
     - parameter g: (query) Green (optional)
     - parameter b: (query) Blue (optional)
     - parameter brightness: (query) Brightness multiplier (optional)
     - parameter saturation: (query) Saturation multiplier (optional)
     - parameter hue: (query) Hue rotation in degrees (optional)
     - parameter lightness: (query) Lightness addend (optional)
     - parameter html: (query)  (optional)
     - parameter json: (query)  (optional)
     - returns: RequestBuilder<URL> 
     */
    open class func catGetWithRequestBuilder(id: String, type: ModelType_catGet? = nil, filter: Filter_catGet? = nil, fit: Fit_catGet? = nil, position: Position_catGet? = nil, width: Int? = nil, height: Int? = nil, blur: Int? = nil, r: Int? = nil, g: Int? = nil, b: Int? = nil, brightness: Float? = nil, saturation: Float? = nil, hue: Int? = nil, lightness: Int? = nil, html: Bool? = nil, json: Bool? = nil) -> RequestBuilder<URL> {
        var localVariablePath = "/cat/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "type": (wrappedValue: type?.encodeToJSON(), isExplode: true),
            "filter": (wrappedValue: filter?.encodeToJSON(), isExplode: true),
            "fit": (wrappedValue: fit?.encodeToJSON(), isExplode: true),
            "position": (wrappedValue: position?.encodeToJSON(), isExplode: true),
            "width": (wrappedValue: width?.encodeToJSON(), isExplode: true),
            "height": (wrappedValue: height?.encodeToJSON(), isExplode: true),
            "blur": (wrappedValue: blur?.encodeToJSON(), isExplode: true),
            "r": (wrappedValue: r?.encodeToJSON(), isExplode: true),
            "g": (wrappedValue: g?.encodeToJSON(), isExplode: true),
            "b": (wrappedValue: b?.encodeToJSON(), isExplode: true),
            "brightness": (wrappedValue: brightness?.encodeToJSON(), isExplode: true),
            "saturation": (wrappedValue: saturation?.encodeToJSON(), isExplode: true),
            "hue": (wrappedValue: hue?.encodeToJSON(), isExplode: true),
            "lightness": (wrappedValue: lightness?.encodeToJSON(), isExplode: true),
            "html": (wrappedValue: html?.encodeToJSON(), isExplode: true),
            "json": (wrappedValue: json?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter font
     */
    public enum Font_catGetText: String, CaseIterable {
        case andaleMono = "Andale Mono"
        case impact = "Impact"
        case arial = "Arial"
        case arialBlack = "Arial Black"
        case comicSansMs = "Comic Sans MS"
        case courierNew = "Courier New"
        case georgia = "Georgia"
        case timesNewRoman = "Times New Roman"
        case verdana = "Verdana"
        case webdings = "Webdings"
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_catGetText: String, CaseIterable {
        case square = "square"
        case medium = "medium"
        case small = "small"
        case xsmall = "xsmall"
    }

    /**
     * enum for parameter filter
     */
    public enum Filter_catGetText: String, CaseIterable {
        case mono = "mono"
        case negate = "negate"
        case custom = "custom"
    }

    /**
     * enum for parameter fit
     */
    public enum Fit_catGetText: String, CaseIterable {
        case cover = "cover"
        case contain = "contain"
        case fill = "fill"
        case inside = "inside"
        case outside = "outside"
    }

    /**
     * enum for parameter position
     */
    public enum Position_catGetText: String, CaseIterable {
        case top = "top"
        case rightTop = "right top"
        case _right = "right"
        case rightBottom = "right bottom"
        case bottom = "bottom"
        case leftBottom = "left bottom"
        case _left = "left"
        case leftTop = "left top"
        case center = "center"
    }

    /**

     - parameter id: (path)  
     - parameter text: (path)  
     - parameter font: (query)  (optional, default to .impact)
     - parameter fontSize: (query)  (optional, default to 30)
     - parameter fontColor: (query)  (optional, default to "#000")
     - parameter fontBackground: (query)  (optional, default to "none")
     - parameter type: (query)  (optional)
     - parameter filter: (query)  (optional)
     - parameter fit: (query)  (optional)
     - parameter position: (query)  (optional, default to .center)
     - parameter width: (query)  (optional)
     - parameter height: (query)  (optional)
     - parameter blur: (query)  (optional)
     - parameter r: (query) Red (optional)
     - parameter g: (query) Green (optional)
     - parameter b: (query) Blue (optional)
     - parameter brightness: (query) Brightness multiplier (optional)
     - parameter saturation: (query) Saturation multiplier (optional)
     - parameter hue: (query) Hue rotation in degrees (optional)
     - parameter lightness: (query) Lightness addend (optional)
     - parameter html: (query)  (optional)
     - parameter json: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func catGetText(id: String, text: String, font: Font_catGetText? = nil, fontSize: Int? = nil, fontColor: String? = nil, fontBackground: String? = nil, type: ModelType_catGetText? = nil, filter: Filter_catGetText? = nil, fit: Fit_catGetText? = nil, position: Position_catGetText? = nil, width: Int? = nil, height: Int? = nil, blur: Int? = nil, r: Int? = nil, g: Int? = nil, b: Int? = nil, brightness: Float? = nil, saturation: Float? = nil, hue: Int? = nil, lightness: Int? = nil, html: Bool? = nil, json: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) -> RequestTask {
        return catGetTextWithRequestBuilder(id: id, text: text, font: font, fontSize: fontSize, fontColor: fontColor, fontBackground: fontBackground, type: type, filter: filter, fit: fit, position: position, width: width, height: height, blur: blur, r: r, g: g, b: b, brightness: brightness, saturation: saturation, hue: hue, lightness: lightness, html: html, json: json).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /cat/{id}/says/{text}
     - Get cat by id saying text
     - parameter id: (path)  
     - parameter text: (path)  
     - parameter font: (query)  (optional, default to .impact)
     - parameter fontSize: (query)  (optional, default to 30)
     - parameter fontColor: (query)  (optional, default to "#000")
     - parameter fontBackground: (query)  (optional, default to "none")
     - parameter type: (query)  (optional)
     - parameter filter: (query)  (optional)
     - parameter fit: (query)  (optional)
     - parameter position: (query)  (optional, default to .center)
     - parameter width: (query)  (optional)
     - parameter height: (query)  (optional)
     - parameter blur: (query)  (optional)
     - parameter r: (query) Red (optional)
     - parameter g: (query) Green (optional)
     - parameter b: (query) Blue (optional)
     - parameter brightness: (query) Brightness multiplier (optional)
     - parameter saturation: (query) Saturation multiplier (optional)
     - parameter hue: (query) Hue rotation in degrees (optional)
     - parameter lightness: (query) Lightness addend (optional)
     - parameter html: (query)  (optional)
     - parameter json: (query)  (optional)
     - returns: RequestBuilder<URL> 
     */
    open class func catGetTextWithRequestBuilder(id: String, text: String, font: Font_catGetText? = nil, fontSize: Int? = nil, fontColor: String? = nil, fontBackground: String? = nil, type: ModelType_catGetText? = nil, filter: Filter_catGetText? = nil, fit: Fit_catGetText? = nil, position: Position_catGetText? = nil, width: Int? = nil, height: Int? = nil, blur: Int? = nil, r: Int? = nil, g: Int? = nil, b: Int? = nil, brightness: Float? = nil, saturation: Float? = nil, hue: Int? = nil, lightness: Int? = nil, html: Bool? = nil, json: Bool? = nil) -> RequestBuilder<URL> {
        var localVariablePath = "/cat/{id}/says/{text}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let textPreEscape = "\(APIHelper.mapValueToPathItem(text))"
        let textPostEscape = textPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{text}", with: textPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "font": (wrappedValue: font?.encodeToJSON(), isExplode: true),
            "fontSize": (wrappedValue: fontSize?.encodeToJSON(), isExplode: true),
            "fontColor": (wrappedValue: fontColor?.encodeToJSON(), isExplode: true),
            "fontBackground": (wrappedValue: fontBackground?.encodeToJSON(), isExplode: true),
            "type": (wrappedValue: type?.encodeToJSON(), isExplode: true),
            "filter": (wrappedValue: filter?.encodeToJSON(), isExplode: true),
            "fit": (wrappedValue: fit?.encodeToJSON(), isExplode: true),
            "position": (wrappedValue: position?.encodeToJSON(), isExplode: true),
            "width": (wrappedValue: width?.encodeToJSON(), isExplode: true),
            "height": (wrappedValue: height?.encodeToJSON(), isExplode: true),
            "blur": (wrappedValue: blur?.encodeToJSON(), isExplode: true),
            "r": (wrappedValue: r?.encodeToJSON(), isExplode: true),
            "g": (wrappedValue: g?.encodeToJSON(), isExplode: true),
            "b": (wrappedValue: b?.encodeToJSON(), isExplode: true),
            "brightness": (wrappedValue: brightness?.encodeToJSON(), isExplode: true),
            "saturation": (wrappedValue: saturation?.encodeToJSON(), isExplode: true),
            "hue": (wrappedValue: hue?.encodeToJSON(), isExplode: true),
            "lightness": (wrappedValue: lightness?.encodeToJSON(), isExplode: true),
            "html": (wrappedValue: html?.encodeToJSON(), isExplode: true),
            "json": (wrappedValue: json?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_catRandom: String, CaseIterable {
        case square = "square"
        case medium = "medium"
        case small = "small"
        case xsmall = "xsmall"
    }

    /**
     * enum for parameter filter
     */
    public enum Filter_catRandom: String, CaseIterable {
        case mono = "mono"
        case negate = "negate"
        case custom = "custom"
    }

    /**
     * enum for parameter fit
     */
    public enum Fit_catRandom: String, CaseIterable {
        case cover = "cover"
        case contain = "contain"
        case fill = "fill"
        case inside = "inside"
        case outside = "outside"
    }

    /**
     * enum for parameter position
     */
    public enum Position_catRandom: String, CaseIterable {
        case top = "top"
        case rightTop = "right top"
        case _right = "right"
        case rightBottom = "right bottom"
        case bottom = "bottom"
        case leftBottom = "left bottom"
        case _left = "left"
        case leftTop = "left top"
        case center = "center"
    }

    /**

     - parameter type: (query)  (optional)
     - parameter filter: (query)  (optional)
     - parameter fit: (query)  (optional)
     - parameter position: (query)  (optional, default to .center)
     - parameter width: (query)  (optional)
     - parameter height: (query)  (optional)
     - parameter blur: (query)  (optional)
     - parameter r: (query) Red (optional)
     - parameter g: (query) Green (optional)
     - parameter b: (query) Blue (optional)
     - parameter brightness: (query) Brightness multiplier (optional)
     - parameter saturation: (query) Saturation multiplier (optional)
     - parameter hue: (query) Hue rotation in degrees (optional)
     - parameter lightness: (query) Lightness addend (optional)
     - parameter html: (query)  (optional)
     - parameter json: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func catRandom(type: ModelType_catRandom? = nil, filter: Filter_catRandom? = nil, fit: Fit_catRandom? = nil, position: Position_catRandom? = nil, width: Int? = nil, height: Int? = nil, blur: Int? = nil, r: Int? = nil, g: Int? = nil, b: Int? = nil, brightness: Float? = nil, saturation: Float? = nil, hue: Int? = nil, lightness: Int? = nil, html: Bool? = nil, json: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) -> RequestTask {
        return catRandomWithRequestBuilder(type: type, filter: filter, fit: fit, position: position, width: width, height: height, blur: blur, r: r, g: g, b: b, brightness: brightness, saturation: saturation, hue: hue, lightness: lightness, html: html, json: json).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /cat
     - Get a random cat
     - parameter type: (query)  (optional)
     - parameter filter: (query)  (optional)
     - parameter fit: (query)  (optional)
     - parameter position: (query)  (optional, default to .center)
     - parameter width: (query)  (optional)
     - parameter height: (query)  (optional)
     - parameter blur: (query)  (optional)
     - parameter r: (query) Red (optional)
     - parameter g: (query) Green (optional)
     - parameter b: (query) Blue (optional)
     - parameter brightness: (query) Brightness multiplier (optional)
     - parameter saturation: (query) Saturation multiplier (optional)
     - parameter hue: (query) Hue rotation in degrees (optional)
     - parameter lightness: (query) Lightness addend (optional)
     - parameter html: (query)  (optional)
     - parameter json: (query)  (optional)
     - returns: RequestBuilder<URL> 
     */
    open class func catRandomWithRequestBuilder(type: ModelType_catRandom? = nil, filter: Filter_catRandom? = nil, fit: Fit_catRandom? = nil, position: Position_catRandom? = nil, width: Int? = nil, height: Int? = nil, blur: Int? = nil, r: Int? = nil, g: Int? = nil, b: Int? = nil, brightness: Float? = nil, saturation: Float? = nil, hue: Int? = nil, lightness: Int? = nil, html: Bool? = nil, json: Bool? = nil) -> RequestBuilder<URL> {
        let localVariablePath = "/cat"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "type": (wrappedValue: type?.encodeToJSON(), isExplode: true),
            "filter": (wrappedValue: filter?.encodeToJSON(), isExplode: true),
            "fit": (wrappedValue: fit?.encodeToJSON(), isExplode: true),
            "position": (wrappedValue: position?.encodeToJSON(), isExplode: true),
            "width": (wrappedValue: width?.encodeToJSON(), isExplode: true),
            "height": (wrappedValue: height?.encodeToJSON(), isExplode: true),
            "blur": (wrappedValue: blur?.encodeToJSON(), isExplode: true),
            "r": (wrappedValue: r?.encodeToJSON(), isExplode: true),
            "g": (wrappedValue: g?.encodeToJSON(), isExplode: true),
            "b": (wrappedValue: b?.encodeToJSON(), isExplode: true),
            "brightness": (wrappedValue: brightness?.encodeToJSON(), isExplode: true),
            "saturation": (wrappedValue: saturation?.encodeToJSON(), isExplode: true),
            "hue": (wrappedValue: hue?.encodeToJSON(), isExplode: true),
            "lightness": (wrappedValue: lightness?.encodeToJSON(), isExplode: true),
            "html": (wrappedValue: html?.encodeToJSON(), isExplode: true),
            "json": (wrappedValue: json?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_catRandomTag: String, CaseIterable {
        case square = "square"
        case medium = "medium"
        case small = "small"
        case xsmall = "xsmall"
    }

    /**
     * enum for parameter filter
     */
    public enum Filter_catRandomTag: String, CaseIterable {
        case mono = "mono"
        case negate = "negate"
        case custom = "custom"
    }

    /**
     * enum for parameter fit
     */
    public enum Fit_catRandomTag: String, CaseIterable {
        case cover = "cover"
        case contain = "contain"
        case fill = "fill"
        case inside = "inside"
        case outside = "outside"
    }

    /**
     * enum for parameter position
     */
    public enum Position_catRandomTag: String, CaseIterable {
        case top = "top"
        case rightTop = "right top"
        case _right = "right"
        case rightBottom = "right bottom"
        case bottom = "bottom"
        case leftBottom = "left bottom"
        case _left = "left"
        case leftTop = "left top"
        case center = "center"
    }

    /**

     - parameter tag: (path)  
     - parameter type: (query)  (optional)
     - parameter filter: (query)  (optional)
     - parameter fit: (query)  (optional)
     - parameter position: (query)  (optional, default to .center)
     - parameter width: (query)  (optional)
     - parameter height: (query)  (optional)
     - parameter blur: (query)  (optional)
     - parameter r: (query) Red (optional)
     - parameter g: (query) Green (optional)
     - parameter b: (query) Blue (optional)
     - parameter brightness: (query) Brightness multiplier (optional)
     - parameter saturation: (query) Saturation multiplier (optional)
     - parameter hue: (query) Hue rotation in degrees (optional)
     - parameter lightness: (query) Lightness addend (optional)
     - parameter html: (query)  (optional)
     - parameter json: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func catRandomTag(tag: String, type: ModelType_catRandomTag? = nil, filter: Filter_catRandomTag? = nil, fit: Fit_catRandomTag? = nil, position: Position_catRandomTag? = nil, width: Int? = nil, height: Int? = nil, blur: Int? = nil, r: Int? = nil, g: Int? = nil, b: Int? = nil, brightness: Float? = nil, saturation: Float? = nil, hue: Int? = nil, lightness: Int? = nil, html: Bool? = nil, json: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) -> RequestTask {
        return catRandomTagWithRequestBuilder(tag: tag, type: type, filter: filter, fit: fit, position: position, width: width, height: height, blur: blur, r: r, g: g, b: b, brightness: brightness, saturation: saturation, hue: hue, lightness: lightness, html: html, json: json).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /cat/{tag}
     - Get random cat by tag
     - parameter tag: (path)  
     - parameter type: (query)  (optional)
     - parameter filter: (query)  (optional)
     - parameter fit: (query)  (optional)
     - parameter position: (query)  (optional, default to .center)
     - parameter width: (query)  (optional)
     - parameter height: (query)  (optional)
     - parameter blur: (query)  (optional)
     - parameter r: (query) Red (optional)
     - parameter g: (query) Green (optional)
     - parameter b: (query) Blue (optional)
     - parameter brightness: (query) Brightness multiplier (optional)
     - parameter saturation: (query) Saturation multiplier (optional)
     - parameter hue: (query) Hue rotation in degrees (optional)
     - parameter lightness: (query) Lightness addend (optional)
     - parameter html: (query)  (optional)
     - parameter json: (query)  (optional)
     - returns: RequestBuilder<URL> 
     */
    open class func catRandomTagWithRequestBuilder(tag: String, type: ModelType_catRandomTag? = nil, filter: Filter_catRandomTag? = nil, fit: Fit_catRandomTag? = nil, position: Position_catRandomTag? = nil, width: Int? = nil, height: Int? = nil, blur: Int? = nil, r: Int? = nil, g: Int? = nil, b: Int? = nil, brightness: Float? = nil, saturation: Float? = nil, hue: Int? = nil, lightness: Int? = nil, html: Bool? = nil, json: Bool? = nil) -> RequestBuilder<URL> {
        var localVariablePath = "/cat/{tag}"
        let tagPreEscape = "\(APIHelper.mapValueToPathItem(tag))"
        let tagPostEscape = tagPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{tag}", with: tagPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "type": (wrappedValue: type?.encodeToJSON(), isExplode: true),
            "filter": (wrappedValue: filter?.encodeToJSON(), isExplode: true),
            "fit": (wrappedValue: fit?.encodeToJSON(), isExplode: true),
            "position": (wrappedValue: position?.encodeToJSON(), isExplode: true),
            "width": (wrappedValue: width?.encodeToJSON(), isExplode: true),
            "height": (wrappedValue: height?.encodeToJSON(), isExplode: true),
            "blur": (wrappedValue: blur?.encodeToJSON(), isExplode: true),
            "r": (wrappedValue: r?.encodeToJSON(), isExplode: true),
            "g": (wrappedValue: g?.encodeToJSON(), isExplode: true),
            "b": (wrappedValue: b?.encodeToJSON(), isExplode: true),
            "brightness": (wrappedValue: brightness?.encodeToJSON(), isExplode: true),
            "saturation": (wrappedValue: saturation?.encodeToJSON(), isExplode: true),
            "hue": (wrappedValue: hue?.encodeToJSON(), isExplode: true),
            "lightness": (wrappedValue: lightness?.encodeToJSON(), isExplode: true),
            "html": (wrappedValue: html?.encodeToJSON(), isExplode: true),
            "json": (wrappedValue: json?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter font
     */
    public enum Font_catRandomTagText: String, CaseIterable {
        case andaleMono = "Andale Mono"
        case impact = "Impact"
        case arial = "Arial"
        case arialBlack = "Arial Black"
        case comicSansMs = "Comic Sans MS"
        case courierNew = "Courier New"
        case georgia = "Georgia"
        case timesNewRoman = "Times New Roman"
        case verdana = "Verdana"
        case webdings = "Webdings"
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_catRandomTagText: String, CaseIterable {
        case square = "square"
        case medium = "medium"
        case small = "small"
        case xsmall = "xsmall"
    }

    /**
     * enum for parameter filter
     */
    public enum Filter_catRandomTagText: String, CaseIterable {
        case mono = "mono"
        case negate = "negate"
        case custom = "custom"
    }

    /**
     * enum for parameter fit
     */
    public enum Fit_catRandomTagText: String, CaseIterable {
        case cover = "cover"
        case contain = "contain"
        case fill = "fill"
        case inside = "inside"
        case outside = "outside"
    }

    /**
     * enum for parameter position
     */
    public enum Position_catRandomTagText: String, CaseIterable {
        case top = "top"
        case rightTop = "right top"
        case _right = "right"
        case rightBottom = "right bottom"
        case bottom = "bottom"
        case leftBottom = "left bottom"
        case _left = "left"
        case leftTop = "left top"
        case center = "center"
    }

    /**

     - parameter tag: (path)  
     - parameter text: (path)  
     - parameter font: (query)  (optional, default to .impact)
     - parameter fontSize: (query)  (optional, default to 30)
     - parameter fontColor: (query)  (optional, default to "#000")
     - parameter fontBackground: (query)  (optional, default to "none")
     - parameter type: (query)  (optional)
     - parameter filter: (query)  (optional)
     - parameter fit: (query)  (optional)
     - parameter position: (query)  (optional, default to .center)
     - parameter width: (query)  (optional)
     - parameter height: (query)  (optional)
     - parameter blur: (query)  (optional)
     - parameter r: (query) Red (optional)
     - parameter g: (query) Green (optional)
     - parameter b: (query) Blue (optional)
     - parameter brightness: (query) Brightness multiplier (optional)
     - parameter saturation: (query) Saturation multiplier (optional)
     - parameter hue: (query) Hue rotation in degrees (optional)
     - parameter lightness: (query) Lightness addend (optional)
     - parameter html: (query)  (optional)
     - parameter json: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func catRandomTagText(tag: String, text: String, font: Font_catRandomTagText? = nil, fontSize: Int? = nil, fontColor: String? = nil, fontBackground: String? = nil, type: ModelType_catRandomTagText? = nil, filter: Filter_catRandomTagText? = nil, fit: Fit_catRandomTagText? = nil, position: Position_catRandomTagText? = nil, width: Int? = nil, height: Int? = nil, blur: Int? = nil, r: Int? = nil, g: Int? = nil, b: Int? = nil, brightness: Float? = nil, saturation: Float? = nil, hue: Int? = nil, lightness: Int? = nil, html: Bool? = nil, json: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) -> RequestTask {
        return catRandomTagTextWithRequestBuilder(tag: tag, text: text, font: font, fontSize: fontSize, fontColor: fontColor, fontBackground: fontBackground, type: type, filter: filter, fit: fit, position: position, width: width, height: height, blur: blur, r: r, g: g, b: b, brightness: brightness, saturation: saturation, hue: hue, lightness: lightness, html: html, json: json).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /cat/{tag}/says/{text}
     - Get random cat by tag saying text
     - parameter tag: (path)  
     - parameter text: (path)  
     - parameter font: (query)  (optional, default to .impact)
     - parameter fontSize: (query)  (optional, default to 30)
     - parameter fontColor: (query)  (optional, default to "#000")
     - parameter fontBackground: (query)  (optional, default to "none")
     - parameter type: (query)  (optional)
     - parameter filter: (query)  (optional)
     - parameter fit: (query)  (optional)
     - parameter position: (query)  (optional, default to .center)
     - parameter width: (query)  (optional)
     - parameter height: (query)  (optional)
     - parameter blur: (query)  (optional)
     - parameter r: (query) Red (optional)
     - parameter g: (query) Green (optional)
     - parameter b: (query) Blue (optional)
     - parameter brightness: (query) Brightness multiplier (optional)
     - parameter saturation: (query) Saturation multiplier (optional)
     - parameter hue: (query) Hue rotation in degrees (optional)
     - parameter lightness: (query) Lightness addend (optional)
     - parameter html: (query)  (optional)
     - parameter json: (query)  (optional)
     - returns: RequestBuilder<URL> 
     */
    open class func catRandomTagTextWithRequestBuilder(tag: String, text: String, font: Font_catRandomTagText? = nil, fontSize: Int? = nil, fontColor: String? = nil, fontBackground: String? = nil, type: ModelType_catRandomTagText? = nil, filter: Filter_catRandomTagText? = nil, fit: Fit_catRandomTagText? = nil, position: Position_catRandomTagText? = nil, width: Int? = nil, height: Int? = nil, blur: Int? = nil, r: Int? = nil, g: Int? = nil, b: Int? = nil, brightness: Float? = nil, saturation: Float? = nil, hue: Int? = nil, lightness: Int? = nil, html: Bool? = nil, json: Bool? = nil) -> RequestBuilder<URL> {
        var localVariablePath = "/cat/{tag}/says/{text}"
        let tagPreEscape = "\(APIHelper.mapValueToPathItem(tag))"
        let tagPostEscape = tagPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{tag}", with: tagPostEscape, options: .literal, range: nil)
        let textPreEscape = "\(APIHelper.mapValueToPathItem(text))"
        let textPostEscape = textPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{text}", with: textPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "font": (wrappedValue: font?.encodeToJSON(), isExplode: true),
            "fontSize": (wrappedValue: fontSize?.encodeToJSON(), isExplode: true),
            "fontColor": (wrappedValue: fontColor?.encodeToJSON(), isExplode: true),
            "fontBackground": (wrappedValue: fontBackground?.encodeToJSON(), isExplode: true),
            "type": (wrappedValue: type?.encodeToJSON(), isExplode: true),
            "filter": (wrappedValue: filter?.encodeToJSON(), isExplode: true),
            "fit": (wrappedValue: fit?.encodeToJSON(), isExplode: true),
            "position": (wrappedValue: position?.encodeToJSON(), isExplode: true),
            "width": (wrappedValue: width?.encodeToJSON(), isExplode: true),
            "height": (wrappedValue: height?.encodeToJSON(), isExplode: true),
            "blur": (wrappedValue: blur?.encodeToJSON(), isExplode: true),
            "r": (wrappedValue: r?.encodeToJSON(), isExplode: true),
            "g": (wrappedValue: g?.encodeToJSON(), isExplode: true),
            "b": (wrappedValue: b?.encodeToJSON(), isExplode: true),
            "brightness": (wrappedValue: brightness?.encodeToJSON(), isExplode: true),
            "saturation": (wrappedValue: saturation?.encodeToJSON(), isExplode: true),
            "hue": (wrappedValue: hue?.encodeToJSON(), isExplode: true),
            "lightness": (wrappedValue: lightness?.encodeToJSON(), isExplode: true),
            "html": (wrappedValue: html?.encodeToJSON(), isExplode: true),
            "json": (wrappedValue: json?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter font
     */
    public enum Font_catRandomText: String, CaseIterable {
        case andaleMono = "Andale Mono"
        case impact = "Impact"
        case arial = "Arial"
        case arialBlack = "Arial Black"
        case comicSansMs = "Comic Sans MS"
        case courierNew = "Courier New"
        case georgia = "Georgia"
        case timesNewRoman = "Times New Roman"
        case verdana = "Verdana"
        case webdings = "Webdings"
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_catRandomText: String, CaseIterable {
        case square = "square"
        case medium = "medium"
        case small = "small"
        case xsmall = "xsmall"
    }

    /**
     * enum for parameter filter
     */
    public enum Filter_catRandomText: String, CaseIterable {
        case mono = "mono"
        case negate = "negate"
        case custom = "custom"
    }

    /**
     * enum for parameter fit
     */
    public enum Fit_catRandomText: String, CaseIterable {
        case cover = "cover"
        case contain = "contain"
        case fill = "fill"
        case inside = "inside"
        case outside = "outside"
    }

    /**
     * enum for parameter position
     */
    public enum Position_catRandomText: String, CaseIterable {
        case top = "top"
        case rightTop = "right top"
        case _right = "right"
        case rightBottom = "right bottom"
        case bottom = "bottom"
        case leftBottom = "left bottom"
        case _left = "left"
        case leftTop = "left top"
        case center = "center"
    }

    /**

     - parameter text: (path)  
     - parameter font: (query)  (optional, default to .impact)
     - parameter fontSize: (query)  (optional, default to 30)
     - parameter fontColor: (query)  (optional, default to "#000")
     - parameter fontBackground: (query)  (optional, default to "none")
     - parameter type: (query)  (optional)
     - parameter filter: (query)  (optional)
     - parameter fit: (query)  (optional)
     - parameter position: (query)  (optional, default to .center)
     - parameter width: (query)  (optional)
     - parameter height: (query)  (optional)
     - parameter blur: (query)  (optional)
     - parameter r: (query) Red (optional)
     - parameter g: (query) Green (optional)
     - parameter b: (query) Blue (optional)
     - parameter brightness: (query) Brightness multiplier (optional)
     - parameter saturation: (query) Saturation multiplier (optional)
     - parameter hue: (query) Hue rotation in degrees (optional)
     - parameter lightness: (query) Lightness addend (optional)
     - parameter html: (query)  (optional)
     - parameter json: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func catRandomText(text: String, font: Font_catRandomText? = nil, fontSize: Int? = nil, fontColor: String? = nil, fontBackground: String? = nil, type: ModelType_catRandomText? = nil, filter: Filter_catRandomText? = nil, fit: Fit_catRandomText? = nil, position: Position_catRandomText? = nil, width: Int? = nil, height: Int? = nil, blur: Int? = nil, r: Int? = nil, g: Int? = nil, b: Int? = nil, brightness: Float? = nil, saturation: Float? = nil, hue: Int? = nil, lightness: Int? = nil, html: Bool? = nil, json: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) -> RequestTask {
        return catRandomTextWithRequestBuilder(text: text, font: font, fontSize: fontSize, fontColor: fontColor, fontBackground: fontBackground, type: type, filter: filter, fit: fit, position: position, width: width, height: height, blur: blur, r: r, g: g, b: b, brightness: brightness, saturation: saturation, hue: hue, lightness: lightness, html: html, json: json).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /cat/says/{text}
     - Get random cat saying text
     - parameter text: (path)  
     - parameter font: (query)  (optional, default to .impact)
     - parameter fontSize: (query)  (optional, default to 30)
     - parameter fontColor: (query)  (optional, default to "#000")
     - parameter fontBackground: (query)  (optional, default to "none")
     - parameter type: (query)  (optional)
     - parameter filter: (query)  (optional)
     - parameter fit: (query)  (optional)
     - parameter position: (query)  (optional, default to .center)
     - parameter width: (query)  (optional)
     - parameter height: (query)  (optional)
     - parameter blur: (query)  (optional)
     - parameter r: (query) Red (optional)
     - parameter g: (query) Green (optional)
     - parameter b: (query) Blue (optional)
     - parameter brightness: (query) Brightness multiplier (optional)
     - parameter saturation: (query) Saturation multiplier (optional)
     - parameter hue: (query) Hue rotation in degrees (optional)
     - parameter lightness: (query) Lightness addend (optional)
     - parameter html: (query)  (optional)
     - parameter json: (query)  (optional)
     - returns: RequestBuilder<URL> 
     */
    open class func catRandomTextWithRequestBuilder(text: String, font: Font_catRandomText? = nil, fontSize: Int? = nil, fontColor: String? = nil, fontBackground: String? = nil, type: ModelType_catRandomText? = nil, filter: Filter_catRandomText? = nil, fit: Fit_catRandomText? = nil, position: Position_catRandomText? = nil, width: Int? = nil, height: Int? = nil, blur: Int? = nil, r: Int? = nil, g: Int? = nil, b: Int? = nil, brightness: Float? = nil, saturation: Float? = nil, hue: Int? = nil, lightness: Int? = nil, html: Bool? = nil, json: Bool? = nil) -> RequestBuilder<URL> {
        var localVariablePath = "/cat/says/{text}"
        let textPreEscape = "\(APIHelper.mapValueToPathItem(text))"
        let textPostEscape = textPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{text}", with: textPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "font": (wrappedValue: font?.encodeToJSON(), isExplode: true),
            "fontSize": (wrappedValue: fontSize?.encodeToJSON(), isExplode: true),
            "fontColor": (wrappedValue: fontColor?.encodeToJSON(), isExplode: true),
            "fontBackground": (wrappedValue: fontBackground?.encodeToJSON(), isExplode: true),
            "type": (wrappedValue: type?.encodeToJSON(), isExplode: true),
            "filter": (wrappedValue: filter?.encodeToJSON(), isExplode: true),
            "fit": (wrappedValue: fit?.encodeToJSON(), isExplode: true),
            "position": (wrappedValue: position?.encodeToJSON(), isExplode: true),
            "width": (wrappedValue: width?.encodeToJSON(), isExplode: true),
            "height": (wrappedValue: height?.encodeToJSON(), isExplode: true),
            "blur": (wrappedValue: blur?.encodeToJSON(), isExplode: true),
            "r": (wrappedValue: r?.encodeToJSON(), isExplode: true),
            "g": (wrappedValue: g?.encodeToJSON(), isExplode: true),
            "b": (wrappedValue: b?.encodeToJSON(), isExplode: true),
            "brightness": (wrappedValue: brightness?.encodeToJSON(), isExplode: true),
            "saturation": (wrappedValue: saturation?.encodeToJSON(), isExplode: true),
            "hue": (wrappedValue: hue?.encodeToJSON(), isExplode: true),
            "lightness": (wrappedValue: lightness?.encodeToJSON(), isExplode: true),
            "html": (wrappedValue: html?.encodeToJSON(), isExplode: true),
            "json": (wrappedValue: json?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
